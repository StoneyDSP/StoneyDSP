name: cmake_project

# credits:
# https://github.com/sudara/pamplejuce/blob/main/.github/workflows/cmake_ctest.yml
# https://github.com/marketplace/actions/vcpkg-action
# https://github.com/Mozilla-Actions/sccache-action/blob/main/README.md
# https://github.com/actions/runner-images/blob/ubuntu22/20240218.1/images/ubuntu/Ubuntu2204-Readme.md

on:
  workflow_dispatch: # lets you run a build from the UI
  pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_CONFIGURATION_TYPES: Debug;Release;RelWithDebInfo;MinSizeRel
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DISPLAY: :0 # linux pluginval needs this
  CMAKE_BUILD_PARALLEL_LEVEL: 3 # Use up to 3 cpus to build juceaide, etc
  VCPKG_ROOT: ./vcpkg
  SCCACHE_GHA_ENABLED: "true"
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp

jobs:
  cmake_project_build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: Linux
            os: ubuntu-22.04
            pluginval-binary: ./pluginval
            triplet: x64-linux
          - name: macOS
            os: macos-14
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            triplet: x64-osx
          - name: Windows
            os: windows-latest
            pluginval-binary: ./pluginval.exe
            triplet: x64-windows

    steps:

    # This is just easier than debugging different compilers on different platforms
    - name: Set up Clang
      if: ${{ matrix.name != 'macOS' }}
      uses: egor-tensin/setup-clang@v1
      
    # This also starts up our "fake" display Xvfb, needed for pluginval
    - name: Install JUCE's Linux Deps
      if: runner.os == 'Linux'
      # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
      run: |
        sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev xvfb ninja-build
        # downgrade gcc to workaround 22.04 and C++20 issue 
        # see: https://github.com/actions/runner-images/issues/8659
        sudo apt-get install -y --allow-downgrades libc6=2.35-0ubuntu3.6 libc6-dev=2.35-0ubuntu3.6 libstdc++6=12.3.0-1ubuntu1~22.04 libgcc-s1=12.3.0-1ubuntu1~22.04
        sudo /usr/bin/Xvfb $DISPLAY &

    - name: Cache IPP (Windows)
      if: runner.os == 'Windows'
      id: cache-ipp
      uses: actions/cache@v3
      with:
        key: ipp-v4
        path: C:\Program Files (x86)\Intel

    - name: Install IPP (Windows)
      if: (runner.os == 'Windows') && (steps.cache-ipp.outputs.cache-hit != 'true')
      shell: bash
      run: |
        curl --output oneapi.exe https://registrationcenter-download.intel.com/akdlm/IRC_NAS/8d158661-ca8f-4e66-b5ea-3e0b3d00836a/w_ipp_oneapi_p_2021.10.1.15_offline.exe
        ./oneapi.exe -s -x -f oneapi
        ./oneapi/bootstrapper.exe -s -c --action install --components=intel.oneapi.win.ipp.devel --eula=accept -p=NEED_VS2022_INTEGRATION=1 --log-dir=.

    - name: Save IPP cache (even on CI fail)
      if: runner.os == 'Windows' && (steps.cache-ipp.outputs.cache-hit != 'true')
      uses: actions/cache/save@v3
      with:
        path: C:\Program Files (x86)\Intel
        key: ipp-v4

    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: choco install ninja

    - name: Install macOS Deps
      if: ${{ matrix.name == 'macOS' }}
      run: brew install ninja osxutils autoconf libtool m4

    # This block can be removed once 15.1 is default (JUCE requires it when building on macOS 14)
    - name: Use latest Xcode on system (macOS)
      if: ${{ matrix.name == 'macOS' }}
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true # Get JUCE populated (if used)

    - name: Cache the build
      uses: mozilla-actions/sccache-action@v0.0.3
        
    - name: vcpkg-action
      # You may pin to the exact commit or the version.
      # uses: johnwason/vcpkg-action@7c4b562bb35ef5a01d9d728acc90100b107dee4d
      uses: johnwason/vcpkg-action@v6
      with:
        # List of packages to build, separated by spaces. Cannot be used with manifest-dir
        # pkgs: # optional
        # vcpkg triplet to use
        triplet: ${{ matrix.triplet }}
        # Extra vcpkg command line args (optional)
        extra-args: --allow-unsupported # optional
        # Additional cache key component (optional)
        cache-key: ${{ matrix.os }} # optional
        # Disable cache (useful for release builds)
        # disable-cache: # optional, default is false
        # vcpkg revision to checkout.
        revision: master # optional, default is 
        # GitHub token to authenticate API requests. Recommended to use  github.token 
        token: ${{ github.token }}
        # Directory containing vcpkg.json manifest file. Cannot be used with pkgs.
        # manifest-dir: ${{ github.workspace }} # optional, default is 
        # Use vcpkg built-in GitHub binary caching. If not specified, will use the dry-run based file cache.
        github-binarycache: true
        # Fetch depth for vcpkg checkout
        # fetch-depth: # optional, default is 1
          
    - name: Use Node.js 16.18.0
      uses: actions/setup-node@v1
      with:
        node-version: 16.18.0

    - name: npm install, build, test
      run: npm install

    - name: Configure
      working-directory: ${{ github.workspace }}
      shell: bash
      # Configure CMake in a 'bin' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S . -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DSTONEYDSP_BUILD_TESTS:BOOL=TRUE -DSTONEYDSP_BUILD_EXTRAS:BOOL=TRUE -DSTONEYDSP_BUILD_EXAMPLES:BOOL=TRUE -DCMAKE_INSTALL_PREFIX=install -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET:STRING=${{ matrix.triplet }} -DVCPKG_MANIFEST_MODE:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

    - name: Build
      working-directory: ${{ github.workspace }}
      shell: bash 
      # Build StoneyDSO with the given configuration
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

    - name: Test
      working-directory: ${{ github.workspace }}
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --test-dir ${{ env.BUILD_DIR }} -j4 --rerun-failed --output-on-failure --verbose 

    - name: Install
      shell: bash
      working-directory: ${{ github.workspace }}
      # Install StoneyDSP with the given configuration
      run: cmake --install ${{ env.BUILD_DIR }}

    - name: Zip Source 
      shell: bash
      working-directory: ${{ github.workspace }}
      # Pack the StoneyDSP source code with the given configuration
      run: cpack --config ${{ env.BUILD_DIR }}/CPackSourceConfig.cmake -B install -G ZIP

    - name: Tar Source
      if: ${{ matrix.name != 'Windows' }}
      shell: bash
      working-directory: ${{ github.workspace }}
      # Pack the StoneyDSP source code with the given configuration
      run: cpack --config ${{ env.BUILD_DIR }}/CPackSourceConfig.cmake -B install -G TGZ

    - name: Zip Build
      shell: bash
      working-directory: ${{github.workspace}}
      # Pack the StoneyDSP source code with the given configuration
      run: cpack --config ${{ env.BUILD_DIR }}/CPackConfig.cmake -B install -G ZIP

    - name: Tar Build
      if: ${{ matrix.name != 'Windows' }}
      shell: bash
      working-directory: ${{github.workspace}}
      # Pack the StoneyDSP source code with the given configuration
      run: cpack --config ${{ env.BUILD_DIR }}/CPackConfig.cmake -B install -G TGZ

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: cmake_project_build

    steps:
    - name: Get Artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        # download-artifact puts these files in their own dirs...
        # Using globs sidesteps having to pass the version around
        files: |
          */*.exe
          */*.zip
          */*.tgz
          */*.dmg
